* 객체(프로퍼티와 메소드) 문제풀기


RESTful API
DataBase에 data담아서 사용하는 방법

react에서 data를 불러올떄 nodejs를 이용해서 
작업할때 express와 통신할떄 RESTful api 이용

API : Application programming interface

style

SOAP : XML-based for enterprise applications  // ESB
RESTful : Resource-based for web servers  // http통신을 통해 json방식으로 data 주고받음
GrapQL : Query language reduce network load
gRPC : High perfomance for microservices //구글에서 만들 remote procedure - 고성능
WebSocket : Bi-directional for low-latency data exchange // 양방향
Webhook : Asynchro

http 
하이퍼텍스트 전송 프로토콜(Hypertext Transfer Protocol)
웹에서 데이터를 주고 받는 데 사용
요청-응답 방식
TCP/IP 기반

- 비연결성(Connectionaless)
- 무상태성(Stateless)

HTTP 요청 메서드
1. GET : 요청 R
2. POST : form에 데이터 담아 전송 create C
3. PUT : modify U
4. DELETE : delete : D
5. PATCH : modify

HTTP 상태 코드
- 1xx : Infomational
- 2xx : Success
- 3xx : Redirect


브라우저 -> request(url, header, body, method) -> HTTP 서버
브라우저 <- response(status, code, header, body) <- HTTP서버

HTTP 헤더
1. 요청 헤더
2. 응답 헤더
- 주요헤더 정보
1. Content-Type
2. Authorization
3. Cookie

RESTful API
- REST(Repo

- 슬래시(/) 구분자는 계층 관계를 나타냄
- CRUD에는 동사를 사용하지 않음
- 적절한 HTTP 메소드 사용
- 소문자 사용
- URI 확장자를 사용하지 않는다
- 명사에는 단수형보다 복수형 사용

웹서비스를 자원(Resource)으로 모델링
자원은 URI를 통해 고유하게 식별

GET : 자원의 상태나 데이터 조회
POST :  새로운 자원 생성
PUT : 업데이트
DELETE : 삭제

자원은 JSON, XML등 다양한 형식으로 표현
클라이언트는 서버에 자원을 요청하고 

자원기반설계
HTTP메소드
무상태
명확한 URI구조
HTTP 상태 코드 사용
HATEOAS(Hypermedia, As The Engine of Application State)
페이징, 필터링, 정렬
캐싱
보안 : osu2 방식
버전관리


// 요청 URL : http://localhos:3000/posts/1

// 응답 JSON
{
	"id":1
	"title":"게시글 제목"
	"links": [
		{"rel":"self", herf":"/posts/1"},
		{"rel":"comments", herf":"/posts/1/comments"},
	]
}

GET // http://localhos:3000/posts?page=2&limit=20
GET // http://localhos:3000/posts?page=2&limit=20

---------------------------
curl : https://curl.se/windows/
개요
- 명령줄(Command line)에서 HTTP요청을 보내고 서버 응답을 확인하는 도구
1. 설치 : 아래주소에서 

------------------------------
powershell > wsl --install

--> curl, wsl 설치 실패
--> curl 대신 postman 사용 예정

postman 설치
vscode > 확장 > postman 검색 > install
- Show Postman : 로그인

get : http://jsonplaceholder.typicode.com/posts
post : http://jsonplaceholder.typicode.com/posts
--> body : row - json 선택후 내용 작성후 send하면 201로응답옴 : id - 101로 
http://jsonplaceholder.typicode.com/posts/1

ch06>ch06_02> 폴더 내에서 
npm init -y 
npm i express nodemon moment sqlite3 : 4개설치

api.js 파일 생성
- postman : post - http://localhost:3000/posts 으로 data insert
- postman : get - http://localhost:3000/posts 으로 data select


api2.js 생성************************
npm i better-sqlite3   
npx nodemon api2.js 으로 터미널에서 실행

express : nest
 
