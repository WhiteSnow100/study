개발디지인패턴 : 갱오브포-gof
데이터베이스 postgresql : ch10
sequelize model : User
userDao : findAll()
userService : findAll() // userDao.findAll()
userController : findAll() // userService.findAll()
userRoute : GET:"/" => // userController.findAll() 과 맵핑
App.js : app.use("/users", userRoute)
- 장점 : db를 mongodb로 변경시 sequelize model 사용할 수 없으므로
sequelize model 대신 mongoose로만 변경하면 기존로직은 변경할 필요가 없음

프로젝트가 간단할때는 userController / userRoute 단계로 줄여도 됨
sequelize model : User
userController : findAll() //  
userRoute : GET:"/" => // userController.findAll() 과 맵핑
App.js : app.use("/users", userRoute)

* vaildation check
npm i express-validator  // validator down 받기

- user table의 createdAt, updatedAt 칼럼에 대해서 자동으로 넣게 마이그레이션
--> 마이그레이션 파일 생성
npx sequelize-cli migration:generate --name change-timestamps-in-users
--> 마이그레이션 실행
npx sequelize-cli db:migrate

postDao.js 작성
postService.js 작성
postController.js 작성
postRoute.js 작성

jest를 이용한 단위 테스트 ==> // npm i jest로 install 되어 있어야 함.
dao>postDao.test.js 파일 생성
package.json 파일의 scripts>test : "jest"
confing>config.json 파일에서 test 내용에 development내용 복사해서 넣을것
npm run test

로그인 token관련 ==>
npm i bcryptjs jsonwebtoken  // bcryptjs(암호화라이브러리), jsonwebtoken(json웹토큰라이브러리)
--> jsonwebtoken : access token, refresh token을 발급할때 도와주는 라이브브러리
dao>userDao.js : email 관련 findUserByEmail 

ch10_01>utils 폴더 생성
ch10_01>utils>token.js 작성
ch10_01>controllers>authController.js 작성

ch10_01>routes>authRoute.js 작성
app.js에서 authRoute 관련 부분 수정


https://jwt.io/
--> accesstoken 을 Encoded 에 넣어서 확인

header : authorization - Bearet 토큰 

ch10_01>middleware 폴더 생성
ch10_01>middleware>auth_middleware.js 파일 생성
postController.js 수정
postRoute.js 수정


