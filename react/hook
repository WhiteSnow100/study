* Hook 
- 함수형 컴포넌트에서 상태(state)와 라이프사이클(lifecycle) 기능을 사용할 수 있게 해 주는 기능
- 기존에는 클래스형 컴포넌트에서만 상태와 라이프사이클을 관리할 수 있었지만, 훅이 도입되면서 함수형 컴포넌트에서도 이를 활용할 수 있게 되어 
  간결하고 재사용 가능한 코드를 작성할 수 있게되었다.

1. useState() : state를 사용하기 위한 훅
  - useState() 사용
  import React, { useState } from 'react';
  function Counter(props) {
    var count = 0;

    return (
        <div>
            <p>총 {count}번 클릭했습니다.</p>
            <button onClick{() => count++}>클릭</button>
        </div>    
    );
  }

  Counter라는 함수 컴포넌트는 버튼을 클릭하면 카운트를 하나씩 증가시키고 현재 카운트를 보여주는 컴포넌트입니다.
  이때 재렌터링이 일어나지 않아 새로운 카운트 값이 화면에 표시되지 않게 된다.

 import React, { useState } from 'react';
 function Counter(props) {
    CONST [count, setCount] = useState(0);

    return (
        <div>
            <p>총 {count}번 클릭했습니다.</p>
            <button onClick{() => setCount(count + 1)}>클릭</button>
        </div>    
    );
  }

버튼이 눌렸을 때 setCount() 함수를 호출해 카운트를 1증가하고 count의 값이 변경되면 컴포넌트가 재렌더링되면서 화면에 새로운 카운트 값이 표기된다
이 과정은 클래스 컴포넌트에서 setState()함수를 호출해서 state가 업데이트되고 이후 컴포넌트가 재렌더링되는 과정과 동일하다.
다만 클래스 컴포넌트에서는 setState()함수 하나를 사용해서 모든 state값을 업데이트할 수 있었지만 usetState()를 사용하는 방법에서
변수 각각에 대해 set 함수가 따로 존재한다.

2. useEffect
- 사이드 이팩트(부작용)를 수행하기 위한 훅
- 

