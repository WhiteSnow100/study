mac : brew install mongodb
layered architecture 레이어드아키텍처
restfull api 인증
방만들어 채팅

09>ch09_03>
npx nodemon app.js


postgre

url 라우팅 : app.put("/post",  // 경로만 관리
--> 특정 URL경로와 컨프롤러를 매핑한다.
컨트롤러 : async (req, res) => {  // 경로에 맵핑된 제어만
--> 요청받고 응답을 처리하는 역할만 수행
모델가져오기, 데이터조회 : const post = await models.Post.findByPk(id);  // DAO
--> DAO : Data Access Object
--> 데이터베이스에 접근, 모델을 사용하여 데이터 처리
비지니스로직 : if(post){ post.title    // 서비스
--> 복잡한 비지니슬직을 처리하는 계층 컨트롤러와 DAO사이에서 로직 수행

layered architecture
- 코드가독성이 높아지고, 유지보수성이 증가
- 재사용성이 향상
- 테스트 용이성 : 단위 테스트 용이
- 협업 용이성
- 확장 용이
--> 단점 : 복잡성 증가, 러닝커브가 있고, 소규모일 경우는 더 복잡해짐

PostgeSQL 설치 : https://www.postgresql.org/download/
https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
- 비번 : 1q2w3e4r
- port : 5432
stack builder는 cancel
window 홈에서 psql(sql shell) 에서 

Server [localhost] // enter
Database [postgres] // enter
Port [5432] // enter
Username [postgres] // enter
postgres 사용자의 암호 : 설치시 내가 지정한 비번 1q2w3e4r
postgres=#  : 성공

create database ch10;  // database ch10생성
CREATE DATABASE
create user admin with encrypted password 'admin1234';  // user/admin1234로 계정생성
CREATE ROLE
grant all privileges on database ch10 to admin;  // user 계정에 admin 권한 지정
GRANT

10>
# postgresql
# json web token

10>ch10_01>
npm init -y
npm i express nodemon pg sequelize sequelize-cli
npm i jest
npx sequelize-cli init  


npx sequelize-cli init 작업시 자동생성되는 폴더
- config
- migrations
- models
- seeders : 테스트 데이터 생성하는 폴더

controllers 폴더 생성
dao 폴더 생성 : data access object
services 폴더 생성 : 복잡한 비지니스로직 담는곳
routes 폴더 생성

ch10_01 폴더에서 app.js 파일 생성

config>config.json 파일에서 development 수정
  "development": {
    "username": "admin",
    "password": "admin1234",
    "database": "ch10",
    "host": "127.0.0.1",
    "dialect": "postgresql"
  }

models 폴더에 user.js, post.js생성

node app.js 실행 // 모델생성


psql *****************
# \l   // 현재 설치된 데이터베이스 목록
# \c ch10  //ch10 database 접속
# \d   //ch10의 table목록
# \d posts   //posts table 스키마
# select * from posts;  // posts table select
# \q   //터미널 빠져나오기


npx sequelize-cli seed:generate --name demo-user
10>ch10_01>seeders> 폴더내에 더미데이터입력용 파일생성
npx sequelize-cli db:seed:all
--> seeders 폴더내의 모든 파일을 항상 실행
--> migrations의 경우는 실행내용을 기록하고 있어 기록된 내용이 있는 경우는 패스

10>ch10_01>psql postgres 실행후  : 맥에서만 가능

dao>userDao.js : models/index.js
services>userService.js : dao>userDao.js
controllers>userController.js : services>userService.js 호출
routes>userRoute.js : controllers>userController.js 맵핑
--> 프로젝트가 작을 경우는 controllers, routes 2개로만 나누어도 무방함

npx nodemon app.js으로 app.js실행하여 서버 띄우기
--> entrypoint는 app.js
