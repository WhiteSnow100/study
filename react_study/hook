* Hook 
- 함수형 컴포넌트에서 상태(state)와 라이프사이클(lifecycle) 기능을 사용할 수 있게 해 주는 기능
- 기존에는 클래스형 컴포넌트에서만 상태와 라이프사이클을 관리할 수 있었지만, 훅이 도입되면서 함수형 컴포넌트에서도 이를 활용할 수 있게 되어 
  간결하고 재사용 가능한 코드를 작성할 수 있게되었다.
- 훅의 이름은 모두 USE로 시작한다.
- 훅은 최상위 레벨(top level)에서만 호출해야 한다
- 리액트 함수 컴포넌트 또는 직접만든 커스텀 훅 호출해야 한다.


1. useState() : state를 사용하기 위한 훅
- const [변수명, set함수명] = useState(초깃값); 
- 변수 각각에 대해 set함수가따로 존재함

  import React, { useState } from 'react';
  function Counter(props) {
    var count = 0;

    return (
        <div>
            <p>총 {count}번 클릭했습니다.</p>
            <button onClick{() => count++}>클릭</button>
        </div>    
    );
  }
  Counter라는 함수 컴포넌트는 버튼을 클릭하면 카운트를 하나씩 증가시키고 현재 카운트를 보여주는 컴포넌트입니다.
  이때 재렌터링이 일어나지 않아 새로운 카운트 값이 화면에 표시되지 않게 된다.

 import React, { useState } from 'react';
 function Counter(props) {
    const [count, setCount] = useState(0); // useState() : setState() 함수

    return (
        <div>
            <p>총 {count}번 클릭했습니다.</p>
            <button onClick{() => setCount(count + 1)}>클릭</button>
        </div>    
    );
  }

버튼이 눌렸을 때 setCount() 함수를 호출해 카운트를 1증가하고 count의 값이 변경되면 컴포넌트가 재렌더링되면서 화면에 새로운 카운트 값이 표기된다
이 과정은 클래스 컴포넌트에서 setState()함수를 호출해서 state가 업데이트되고 이후 컴포넌트가 재렌더링되는 과정과 동일하다.
[ 다만 클래스 컴포넌트에서는 setState()함수 하나를 사용해서 모든 state값을 업데이트할 수 있었지만 usetState()를 사용하는 방법에서
변수 각각에 대해 set 함수가 따로 존재한다. ] 

2. useEffect : 사이드 이팩트(side effect)를 수행하기 위한 훅 
- 사이드 이팩트 : 서버에서 데이터를 받아오거나 수동으로 DOM을 변경하는 등의 작업
- componentDidMount(), componentDidUpdate(), componentWillUnmout() 와 동일한 기능을 하나로 통합해서 제공
- 의존성 배열 : 배열 안에 있는 변수 중에 하나라도 값이 변경되었을 때 이펙트 함수 실행
- 이펙트 함수는 처믐 컴포년트가 렌더링된 이후와 업데이트로 인한 재렌더링 이후에 실행
- 의존성 배열에 빈 배열([])을 넣으면 이펙트 함수가 마운트와 언마운트시에 단 한 번씩만 실행된다.
- 의존성 배열 생략시 컴포넌트가 업데이트될 때마다 호출된다.
- 리턴하는 함수는 컴포넌트 마운트가 해제될 때 호출된다.
- useEffect(이펙트 함수, 의존성 배열)

 import React, { useState, useEffect } from 'react';
 function Counter(props) {
    const [count, setCount] = useState(0); 

    useEffect(() => {
      // 브라우저 API를 사용해서 document의 title을 업데이트 : 크롬부라우저의 경우 탭에 나오는 제목
      document.title = `총 ${count}번 클릭했습니다`;
    });

    return (
        <div>
            <p>총 {count}번 클릭했습니다.</p>
            <button onClick{() => setCount(count + 1)}>클릭</button>
        </div>    
    );
  }
의존성 배열없이 사용한 코드로 DOM이 변경된 이후에 해당 이펙트 함수를 실행하라는 의미
컴포넌트가 처음 렌더링될 떄를 포함해서 매번 렌더링될 때마다 이펙트 실행
componentDidMount(), componentDidUpdate() 와 동일한 역할
또한 이펙트는 함수 컴포넌트 안에서 선언되었기 때문에 해당 컴포넌트의 pops와 state에 접근가능

useEffect(() => {
  // 컴포넌트가 마운트 된 이후
  // 의존성 배열에ㅔ 있는 변수중 하나라도 값이 변경되었을 때 실행
  // 의존성 배열에 빈 배열([])을 넣으면 마운트와 언마운트시에 단 한 번씩만 실행
  // 의존성 배열 생략 시 컴포넌트 업데이트 시마다 실행

  return () => {
    // 컴포넌트가 마운트 해제되기 전에 실행
  }
}, [의존성 변수1, 의존성 변수2,...의존성변수n]);

3. useMemo : Memoized value를 리턴하는 훅
- 파라미터로 Memoized value를 생성하는 create함수와 의존성 배열을 받는다
- useMemo()로 전달된 함수는 렌더링이 일어나는 동안 실행된다.
const memoizedValue = useMemo(
  () => {
    //연산량이 높은 작업를 수행하여 결과를 반환
    return computeExpensiveValue(의존성 변수1, 의존성 변수2);
  },
  [의존성변수1, 의존성변수2]
);

4. useCallback : useMemo() 훅과 유사한 역할로 차이점은 값이 아닌 함수를 반환한다


5. userRef : 레퍼런스Reference를 사용하기 위한 훅은
- 레퍼런스란 특정 컴포넌트에 접근할 수 있는 객체

- const refContainer = useRef(초기값);

