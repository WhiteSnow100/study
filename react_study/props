20241104 

* 특징
- props : prop의 복수형으로 property의 줄일말
- 리액트 컴포넌트의 속성
- 읽기 전용 속성
- 단방향 데이터 흐름 : (부모)컴포넌트에서 (자식)컴포넌트로 전달
- 화살표 함수형에서 () 대신 props 써줌

* 사용방법
function Header(props) {
    console.log('props', props, props.title)
    return <header>
        <h1><a href="/">{props.title}</a></h1>
    </header>    
}
// props : 객체형으로 title: "WEB" 이 Header에 전달되고  props.title에는 WEB 이라는 텍스트가 전달된다.

function Article(props) {
    return <article>
    <h2>{props.title}</h2>
    {props.body}
    </article>
}
// title : welcom, body : Hello, WEB
// title : Hi, body : Hello, React

function App() {
    return {
        <div>
        <Header title="WEB"></Header>  // web
        <Article title="welcome" body="Hello, WEB"></Article>  // welcome, Hello, WEB
        <Article title="Hi" body="Hello, React"></Article>  // Hi, Hello, React
        </div>
    };
}
현정 ===============================================
function study(){
    return(
        <div>
            <h3>주제 props/
            props를 통하여 부모 자식간에 객체,배열,함수 등 값을 전달 할 수 있다.</h3>
            <p>
            1.컴퍼넌트에서 자식에게 props를 전달할때 자식컨포넌트를 호출하여 속성처럼 전달한다.
                예)
                function App() {
                    return (
                        <Greeting name="Alice" />
                    );
                };
                (App:부모, Greeting:자식, name은 속성, "Alice"는 값)

            2.자식요소에서 props로 받아올수있고 간편하게 객체분해를 사용 할 수 있다.
                예)
                function Greeting(props){ };
                function Greeting({name}){ };
               
            </p>
        </div>
    )
}
다영 =========================================================
// Props

// Props는 컴포넌트에 데이터를 전달하는 프로퍼티입니다.
// Props는 읽기 전용입니다.
// 함수 컴포넌트나 클래스 컴포넌트 모두 컴포넌트의 자체 props를 수정해서는 안 됩니다.

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}